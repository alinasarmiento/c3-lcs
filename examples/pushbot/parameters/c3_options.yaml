admm_iter: 4
rho: 0.1
rho_scale: 1
num_threads: 6
delta_option: 1
# options are 'MIQP' or 'QP'
projection_type: 'MIQP'
# options are 'stewart_and_trinkle' or 'anitescu
contact_model: 'stewart_and_trinkle'

warm_start: false
use_predicted_x0: false
end_on_qp_step: false
use_robust_formulation: false
solve_time_filter_alpha: 0.95
publish_frequency: 100

# [x, y, z, lb, ub]
workspace_limits: [[]]
# workspace_limits: [[1.0, 0.0, 0.0, -3.0, 3.0],
# 		   [0.0, 1.0, 0.0, -3.0, 3.0],
# 		   [0.0, 0.0, 1.0, -3.0, 3.0]]
workspace_margins: 0.05
u_horizontal_limits: [-10, 10]
u_vertical_limits: [-0, 30]

mu: [0.4, 0.4]
dt: 0.05
solve_dt: 0.05
num_friction_directions: 2
num_contacts: 2
N: 4
gamma: 1.0 # discount factor on MPC costs

# matrix scaling
w_Q: 20
w_R: 0
# Penalty on all decision variables, assuming scalar
w_G: 1
# Penalty on all decision variables, assuming scalar
w_U: 0.5

# n_lambda = 2 * n_contacts + 2 * n_contacts * num_friction_directions = 20
# size = n_x ( 2+2 ) + n_lambda (2*2 + 2*2*2) + n_u (2) = 26 for stewart and trinkle
# size = n_x ( 2+2 ) + n_lambda (2 * 3 * 2) + n_u (2) = 34 for anitescu
# q_vector, g_vector, u_vector all same size

# State Tracking Error, assuming diagonal
q_vector: [1, 1, 1, 1] # n_x
# Penalty on efforts, assuming diagonal
r_vector: [1, 1]

# Penalty on matching projected variables
g_x: [1, 1, 1, 1] # n_x
g_gamma: [1, 1] # num_contacts
g_lambda_n: [1, 1] # num_contacts
g_lambda_t: [1, 1, 1, 1, 1, 1, 1, 1] # 4*num_contacts
g_lambda: [150, 150, 150, 150, 150, 150, 150, 150]
g_u: [2.5, 2.5]

# Penalty on matching the QP variables
u_x: [1, 1, 1, 1] # n_x
u_gamma: [1, 1] # num_contacts
u_lambda_n: [1, 1] # num_contacts
u_lambda_t: [1, 1, 1, 1, 1, 1, 1, 1] # 4*num_contacts
u_lambda: [150, 150, 150, 150, 150, 150, 150, 150]
u_u: [2.5, 2.5]